#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Oct 23 16:12:51 2018

@author: shaowen1994
"""

import numpy as np
import matplotlib.pyplot as plt

def readfile(path):
    file = open(path,'r')
    data = file.readlines()
    length = len(data)
    for i in range(length):
        line = data[i].strip('\n').split('\t')
        line = [float(x) for x in line]
        line = np.array([line])
        if i == 0:
            result = line
        else:
            result = np.r_[result,line]
    file.close()
    return result

def matrix_to_file(matrix,path):
    row_num = matrix.shape[0]
    m_file = open(path,'w')
    for i in range(row_num):
        line = [str(m) for m in matrix[i]]
        line = '\t'.join(n for n in line)
        m_file.write(line + '\n')
    m_file.close()
# ************** TM_scores Matrix (TM_matrix) ***************
TM_matrix = readfile("TM_matrix.fa")
N = TM_matrix.shape[0]
t_value, t_vector = np.linalg.eig(TM_matrix)
# ************** Similarity Matrix (S) **********************
t_min = min(t_value)
lam = (int(abs(t_min)) + 1)
#S = TM_matrix
S = TM_matrix + lam*np.eye(N)
S = S/(1+lam)
s_value, s_vector = np.linalg.eig(S)
"""
s_min = min(s_value)
print("Smallest eigenvalue of S: %f",s_min)
plt.figure(1)
plt.hist(s_value,bins = 200,normed = True)
plt.title('Ditribution of Eigenvalues.')
plt.xlabel('Eigenvalue')
plt.ylabel('Distribution Density')
"""
# ************** Distance Matrix (D) (square) *************
D = 2*(1-S)
# ************** Gram Matrix (M) **************************
D_comp = sum(sum(D))/(2*(N**2))
D_0 = []
for i in range(N):
    d_i_0 = -D_comp
    for j in range(N):
       d_i_0 += D[i][j]/N
    D_0.append(d_i_0)
D_0 = np.array(D_0)

for i in range(N):
    if i == 0:
        D_minus =  D_0
    else:
        D_minus = np.c_[D_minus,D_0]
      
D_minus = D_minus + np.transpose(D_minus)
M =  0.5*(D_minus-D)
#M = D - D_minus
# ************** Eigenvalue Decomposition *****************
value, vector = np.linalg.eig(M)
matrix_to_file(M,'Gram_matrix.fa')
matrix_to_file(vector,'Gram_Eigenvectors.fa')
s_value = sorted(value,reverse = True)
Value = np.c_[value,s_value]
matrix_to_file(Value,'Gram_Eigenvalues.fa')

sum_v = 0
sum_value = []
for i in s_value:
    sum_v += i
    sum_value.append(sum_v)

print(s_value[0:20])
plt.figure(1)
plt.hist(s_value,bins = 200,normed = True)
plt.title('Ditribution of Eigenvalues.')
plt.xlabel('Eigenvalue')
plt.ylabel('Distribution Density')
plt.figure(2)
plt.hist(s_value[20:],bins = 200,normed = True)
plt.title('Distribution of the Eigenvalues (except the largest 20 values)')
plt.xlabel('Eigenvalue')
plt.ylabel('Distribution Density')
plt.figure(3)
plt.bar(range(1,21),s_value[0:20])
plt.xticks(range(1,21))
plt.title('Top 20 Eigenvalues.')
plt.xlabel('order')
plt.ylabel('Eigenvalues')
plt.figure(4)
plt.plot(s_value)
plt.title('Sorted Eigenvalues')
plt.ylabel('eigenvalue')
plt.figure(5)
plt.plot(np.log(s_value))
plt.title('Sorted Eigenvalues')
plt.ylabel('log(eigenvalue)')
plt.figure(6)
plt.plot(sum_value)
plt.title('Sum of Eigenvalues')